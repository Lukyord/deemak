---
import "@/styles/journals.css";
import type { GetStaticPathsResult, Page } from "astro";
import type { Journal } from "~/sanity/sanity.types";

import { getJournals } from "@/services/journal";
import ElJournalCard from "@/components/journals/el-JournalCard.astro";
import Layout from "@/layouts/Layout.astro";

export async function getStaticPaths({
  paginate,
}: {
  paginate: any;
}): Promise<GetStaticPathsResult> {
  const journalsFetched = await getJournals();
  const journals = Array(20).fill(journalsFetched[0]);

  // const journals = await getJournals();

  // Use Astro's paginate helper
  return paginate(journals, {
    pageSize: 9,
    // Generate pages with the format /journals, /journals/2, /journals/3, etc.
    getPageNumbers: (numberOfPages: number) => {
      const pages = Array.from({ length: numberOfPages }, (_, i) => i + 1);
      // First page should be empty string for root path
      pages[0] = 0;
      return pages;
    },
  });
}

type Props = {
  page: Page<Journal>;
};

const { page } = Astro.props as Props;
const pathname = new URL(Astro.request.url).pathname.split("/");
const firstPath = pathname[1];

const currentJournals = page.data;

// Function to generate page numbers with ellipsis
function getPageNumbers(current: number, last: number) {
  const delta = 2; // Number of pages to show before and after current page
  const left = current - delta;
  const right = current + delta + 1;
  const range = [];
  const rangeWithDots = [];
  let l: number | undefined;

  for (let i = 1; i <= last; i++) {
    if (i === 1 || i === last || (i >= left && i < right)) {
      range.push(i);
    }
  }

  for (const i of range) {
    if (l !== undefined) {
      if (i - l === 2) {
        rangeWithDots.push(l + 1);
      } else if (i - l !== 1) {
        rangeWithDots.push("...");
      }
    }
    rangeWithDots.push(i);
    l = i;
  }

  return rangeWithDots;
}

const pageNumbers = getPageNumbers(page.currentPage, page.lastPage);
---

<Layout title="Deemak Thai Massage">
  <main>
    <section
      data-section="journal-list"
      class:list={["sc-hero", { "first-page": page.currentPage === 1 }]}
    >
      <div class="sc-inner">
        <div class="container">
          <div class="sc-header justify-center">
            <div class="sc-ttl">
              <h1>Journal</h1>
            </div>
          </div>

          <div class="card-container" data-card-layout="grid">
            {
              currentJournals.map((journal) => (
                <ElJournalCard journal={journal} />
              ))
            }
          </div>

          {
            page.lastPage > 1 && (
              <div class="pagination">
                <a
                  href={page.url.prev}
                  class={`pagination-link prev ${page.currentPage === 1 ? "disabled" : ""}`}
                >
                  Previous
                </a>

                <div class="pagination-numbers">
                  {pageNumbers.map((num) =>
                    num === "..." ? (
                      <span class="pagination-link dots">...</span>
                    ) : (
                      <a
                        href={
                          num === 1 ? `/${firstPath}` : `/${firstPath}/${num}`
                        }
                        class:list={[
                          "pagination-link",
                          { active: page.currentPage === num },
                        ]}
                      >
                        {num}
                      </a>
                    ),
                  )}
                </div>

                <a
                  href={page.url.next}
                  class={`pagination-link next ${page.currentPage === page.lastPage ? "disabled" : ""}`}
                >
                  Next
                </a>
              </div>
            )
          }
        </div>
      </div>
    </section>
  </main>
</Layout>
